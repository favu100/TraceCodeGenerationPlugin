plugins {
    // The OpenJFX plugin does not work before Java 11, so we apply it conditionally in an if block further below.
    id "org.openjfx.javafxplugin" version "0.0.8" apply false
}

apply plugin: 'antlr'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'


group 'de.hhu.stups.probplugin'
version '1.0.0'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"


repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        name "snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        name "release"
        url "https://oss.sonatype.org/content/repositories/releases"
    }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven {
        // For the FontAwesomeFX fork that is compatible with Java 8 and 9:
        // https://github.com/xzel23/fontawesomefx
        name "dua3 Bintray"
        url "https://dl.bintray.com/dua3/public"
    }
}

applicationDefaultJvmArgs += [
        "-Xss2M",
]

// Module export/open declarations for Java 9+
def exports = []
def opens = []

// Required by centerdevice-nsmenufx (as of version 2.1.6; see https://github.com/codecentric/NSMenuFX/issues/29)
exports += [
        "javafx.controls/com.sun.javafx.scene.control",
        "javafx.graphics/com.sun.glass.ui",
        "javafx.graphics/com.sun.javafx.menu",
        "javafx.graphics/com.sun.javafx.tk",
]
opens += [
        "javafx.graphics/com.sun.glass.ui.mac",
        "javafx.graphics/com.sun.javafx.tk.quantum",
]

// Required by controlsfx, because we are still using the Java 8-compatible version.
// This has been fixed as of ControlsFX 11.0.0 (see https://github.com/controlsfx/controlsfx/issues/1100), but that release is only compatible with Java 11.
exports += [
        "javafx.graphics/com.sun.javafx.css",
]


applicationDefaultJvmArgs += exports.collect {"--add-exports=${it}=ALL-UNNAMED".toString()}
applicationDefaultJvmArgs += opens.collect {"--add-opens=${it}=ALL-UNNAMED".toString()}



dependencies {
    implementation project(':prob2-ui')
    compile group: 'org.antlr', name: 'ST4', version: '4.1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

apply plugin: "org.openjfx.javafxplugin"
javafx {
    version = "11.0.2"
    modules = [
            "javafx.base",
            "javafx.controls",
            "javafx.fxml",
            "javafx.graphics",
            "javafx.swing",
            "javafx.web",
    ]
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor(0, 'seconds')
}


if( rootProject == project) {
    wrapper {
        gradleVersion = "5.4"
        distributionType = Wrapper.DistributionType.ALL
    }
}

jar {
    baseName = 'Trace-Code-Generation-Plugin'
    version = '0.1.0'
    manifest {
        attributes(['Plugin-Class' : 'de.hhu.stups.probplugin.TraceGeneratorPlugin',
                'Plugin-Id' : 'TraceCodeGeneration',
                'Plugin-Version' : '1.0.0',
                'Plugin-Provider' : 'Fabian Vu',
                'Plugin-Requires' : '0.1.0',
                "Add-Exports": exports.join(" "),
                "Add-Opens": opens.join(" "),
        ])
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

sourceSets.main.java.srcDirs = ['src/main/java']
sourceSets.main.resources.srcDirs = ['src/main/resources']

sourceSets.test.runtimeClasspath += files(sourceSets.main.java.srcDirs)
